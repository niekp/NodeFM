#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodefm:server');
var http = require('http');
var cron = require('node-cron');
var logger = require('../models/logger.js');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Run migrations
 */
let migrations = require('../cronjobs/migration.js');
migrations.run();

/**
 * Setup cronjobs
 */
let lastfm_scrobbles = require('../cronjobs/lastfm-scrobbles.js');
let cron_timeline = require('../cronjobs/timeline.js');
let cron_spotify_releases = require('../cronjobs/spotify-releases.js');
let cron_lastfm_metadata = require('../cronjobs/lastfm-metadata.js');
let cron_spotify_metadata = require('../cronjobs/spotify-metadata.js');
let cron_image_helperfields = require('../cronjobs/images-helperfields.js');

if (process.env.NODE_ENV === 'production') {

	cron.schedule('* * * * *', () => {
		lastfm_scrobbles.run();
	});

	cron.schedule('0 */3 * * *', () => {
	cron_timeline.run();
	});

	cron.schedule('0 */6 * * *', () => {
		cron_spotify_releases.run();
	});

	cron.schedule('0 3 * * *', () => {
		// Very heavy job at the moment.
		cron_image_helperfields.run();
	});

	cron.schedule('*/15 * * * *', () => {
		cron_lastfm_metadata.run();

		if (!cron_spotify_metadata.isRunning()) {
			cron_spotify_metadata.run();
		}
	});

} else {
	logger.log(logger.INFO, `Cronjobs are disabled. Run in NODE_ENV 'production' to enable them.`);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			logger.log(logger.ERROR, `${bind} requires elevated privileges`);
			process.exit(1);
			break;
		case 'EADDRINUSE':
			logger.log(logger.ERROR, `${bind} is already in use`);
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
